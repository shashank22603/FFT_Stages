// FFT64

#include <stdio.h>
#include <math.h>
#include <complex.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include <xtime_l.h>
#include "xparameters.h"
#include "xaxidma.h"
#include "dma_init.h"

#define N 64

int DMA_Init(XAxiDma * AxiDMA, u32 device_ID){
    XAxiDma_Config *DMA_confptr;
    int status;
    // Initialize the DMA
    DMA_confptr=XAxiDma_LookupConfig(XPAR_AXI_DMA_0_DEVICE_ID);
    status=XAxiDma_CfgInitialize(AxiDMA,DMA_confptr);
    // Check whether the DMA is initialized
    if(status!=XST_SUCCESS)
    {
    	printf("\n\rDMA Initialization Failed !");
    	return XST_FAILURE;
    }
    return XST_SUCCESS;
}

const int rev64[N] = {
        0, 32, 16, 48, 8, 40, 24, 56,
        4, 36, 20, 52, 12, 44, 28, 60,
        2, 34, 18, 50, 10, 42, 26, 58,
        6, 38, 22, 54, 14, 46, 30, 62,
        1, 33, 17, 49, 9, 41, 25, 57,
        5, 37, 21, 53, 13, 45, 29, 61,
        3, 35, 19, 51, 11, 43, 27, 59,
        7, 39, 23, 55, 15, 47, 31, 63};
const float complex W64[N/2] = {
    1.0 - 0.0 * I, cos(-M_PI / 32) + sin(-M_PI / 32) * I,
    cos(-2 * M_PI / 32) + sin(-2 * M_PI / 32) * I, cos(-3 * M_PI / 32) + sin(-3 * M_PI / 32) * I,
    cos(-4 * M_PI / 32) + sin(-4 * M_PI / 32) * I, cos(-5 * M_PI / 32) + sin(-5 * M_PI / 32) * I,
    cos(-6 * M_PI / 32) + sin(-6 * M_PI / 32) * I, cos(-7 * M_PI / 32) + sin(-7 * M_PI / 32) * I,
    cos(-8 * M_PI / 32) + sin(-8 * M_PI / 32) * I, cos(-9 * M_PI / 32) + sin(-9 * M_PI / 32) * I,
    cos(-10 * M_PI / 32) + sin(-10 * M_PI / 32) * I, cos(-11 * M_PI / 32) + sin(-11 * M_PI / 32) * I,
    cos(-12 * M_PI / 32) + sin(-12 * M_PI / 32) * I, cos(-13 * M_PI / 32) + sin(-13 * M_PI / 32) * I,
    cos(-14 * M_PI / 32) + sin(-14 * M_PI / 32) * I, cos(-15 * M_PI / 32) + sin(-15 * M_PI / 32) * I,
    cos(-16 * M_PI / 32) + sin(-16 * M_PI / 32) * I, cos(-17 * M_PI / 32) + sin(-17 * M_PI / 32) * I,
    cos(-18 * M_PI / 32) + sin(-18 * M_PI / 32) * I, cos(-19 * M_PI / 32) + sin(-19 * M_PI / 32) * I,
    cos(-20 * M_PI / 32) + sin(-20 * M_PI / 32) * I, cos(-21 * M_PI / 32) + sin(-21 * M_PI / 32) * I,
    cos(-22 * M_PI / 32) + sin(-22 * M_PI / 32) * I, cos(-23 * M_PI / 32) + sin(-23 * M_PI / 32) * I,
    cos(-24 * M_PI / 32) + sin(-24 * M_PI / 32) * I, cos(-25 * M_PI / 32) + sin(-25 * M_PI / 32) * I,
    cos(-26 * M_PI / 32) + sin(-26 * M_PI / 32) * I, cos(-27 * M_PI / 32) + sin(-27 * M_PI / 32) * I,
    cos(-28 * M_PI / 32) + sin(-28 * M_PI / 32) * I, cos(-29 * M_PI / 32) + sin(-29 * M_PI / 32) * I,
    cos(-30 * M_PI / 32) + sin(-30 * M_PI / 32) * I, cos(-31 * M_PI / 32) + sin(-31 * M_PI / 32) * I
};
const float complex W32[N/4] = {
    1.0 - 0.0 * I, cos(-M_PI / 16) + sin(-M_PI / 16) * I,
    cos(-M_PI / 8) + sin(-M_PI / 8) * I, cos(-3 * M_PI / 16) + sin(-3 * M_PI / 16) * I,
    cos(-4 * M_PI / 16) + sin(-4 * M_PI / 16) * I, cos(-5 * M_PI / 16) + sin(-5 * M_PI / 16) * I,
    cos(-6 * M_PI / 16) + sin(-6 * M_PI / 16) * I, cos(-7 * M_PI / 16) + sin(-7 * M_PI / 16) * I,
    cos(-8 * M_PI / 16) + sin(-8 * M_PI / 16) * I, cos(-9 * M_PI / 16) + sin(-9 * M_PI / 16) * I,
    cos(-10 * M_PI / 16) + sin(-10 * M_PI / 16) * I, cos(-11 * M_PI / 16) + sin(-11 * M_PI / 16) * I,
    cos(-12 * M_PI / 16) + sin(-12 * M_PI / 16) * I, cos(-13 * M_PI / 16) + sin(-13 * M_PI / 16) * I,
    cos(-14 * M_PI / 16) + sin(-14 * M_PI / 16) * I, cos(-15 * M_PI / 16) + sin(-15 * M_PI / 16) * I
};
const float complex W16[N/8] = {
    1.0 - 0.0 * I, cos(-M_PI / 8) + sin(-M_PI / 8) * I,
    cos(-M_PI / 4) + sin(-M_PI / 4) * I, cos(-3 * M_PI / 8) + sin(-3 * M_PI / 8) * I,
    0.0 - 1.0 * I, cos(-5 * M_PI / 8) + sin(-5 * M_PI / 8) * I,
    cos(-3 * M_PI / 4) + sin(-3 * M_PI / 4) * I, cos(-7 * M_PI / 8) + sin(-7 * M_PI / 8) * I
};
const float complex W8[N/16] = {1-0*I, M_SQRT1_2 - M_SQRT1_2 * I, 0-1*I, -M_SQRT1_2 - M_SQRT1_2 * I};
const float complex W4[N/32] = {1-0*I, 0-1*I};


void bitreverse (const float complex dataIn [N], float complex dataOut[N]){
		for(int i=0; i<N;i++){
			dataOut[i]=crealf (dataIn[rev64[i]]),cimagf(dataIn[rev64[i]]);
			}
	}
void FFT_stages(const float complex FFT_input[N], float complex FFT_output[N]){
    float complex temp1[N], temp2[N], temp3[N], temp4[N], temp5[N];

       stage1 :
       for(int i = 0; i < N; i += 2){
           temp1[i] = FFT_input[i] + FFT_input[i + 1];

           temp1[i + 1] = FFT_input[i] - FFT_input[i + 1];
       }

       stage2 :
       for(int i = 0; i < N ; i+=4){
           temp2[i] = temp1[i] + W4[0] * temp1[i + 2];
           temp2[i+1] = temp1[i+1] + W4[1] * temp1[i + 3];

           temp2[i + 2] = temp1[i] - W4[0] * temp1[i + 2];
           temp2[i + 3] = temp1[i+1] - W4[1] * temp1[i + 3];
       }

       stage3 :
       for(int i = 0; i < N; i+=8){
           temp3[i+0] = temp2[i+0] + W8[0] * temp2[i + 4];
           temp3[i+1] = temp2[i+1] + W8[1] * temp2[i + 5];
           temp3[i+2] = temp2[i+2] + W8[2] * temp2[i + 6];
           temp3[i+3] = temp2[i+3] + W8[3] * temp2[i + 7];

           temp3[i+4] = temp2[i+0] - W8[0] * temp2[i + 4];
           temp3[i+5] = temp2[i+1] - W8[1] * temp2[i + 5];
           temp3[i+6] = temp2[i+2] - W8[2] * temp2[i + 6];
           temp3[i+7] = temp2[i+3] - W8[3] * temp2[i + 7];
       }

    stage4 :
    for(int i = 0; i < N; i += 16){
        temp4[i+0] = temp3[i+0] + W16[0] * temp3[i + 8];
        temp4[i+1] = temp3[i+1] + W16[1] * temp3[i + 9];
        temp4[i+2] = temp3[i+2] + W16[2] * temp3[i + 10];
        temp4[i+3] = temp3[i+3] + W16[3] * temp3[i + 11];
        temp4[i+4] = temp3[i+4] + W16[4] * temp3[i + 12];
        temp4[i+5] = temp3[i+5] + W16[5] * temp3[i + 13];
        temp4[i+6] = temp3[i+6] + W16[6] * temp3[i + 14];
        temp4[i+7] = temp3[i+7] + W16[7] * temp3[i + 15];

        temp4[i+8]  = temp3[i+0] - W16[0] * temp3[i + 8];
        temp4[i+9]  = temp3[i+1] - W16[1] * temp3[i + 9];
        temp4[i+10] = temp3[i+2] - W16[2] * temp3[i + 10];
        temp4[i+11] = temp3[i+3] - W16[3] * temp3[i + 11];
        temp4[i+12] = temp3[i+4] - W16[4] * temp3[i + 12];
        temp4[i+13] = temp3[i+5] - W16[5] * temp3[i + 13];
        temp4[i+14] = temp3[i+6] - W16[6] * temp3[i + 14];
        temp4[i+15] = temp3[i+7] - W16[7] * temp3[i + 15];
    }

    stage5 :
    for(int i = 0; i < N; i +=32){
        temp5[i+0] = temp4[i+0] + W32[0] * temp4[i + 16];
        temp5[i+1] = temp4[i+1] + W32[1] * temp4[i + 17];
        temp5[i+2] = temp4[i+2] + W32[2] * temp4[i + 18];
        temp5[i+3] = temp4[i+3] + W32[3] * temp4[i + 19];
        temp5[i+4] = temp4[i+4] + W32[4] * temp4[i + 20];
        temp5[i+5] = temp4[i+5] + W32[5] * temp4[i + 21];
        temp5[i+6] = temp4[i+6] + W32[6] * temp4[i + 22];
        temp5[i+7] = temp4[i+7] + W32[7] * temp4[i + 23];
        temp5[i+8]  = temp4[i+8] + W32[8] * temp4[i + 24];
        temp5[i+9]  = temp4[i+9] + W32[9] * temp4[i + 25];
        temp5[i+10] = temp4[i+10] + W32[10] * temp4[i + 26];
        temp5[i+11] = temp4[i+11] + W32[11] * temp4[i + 27];
        temp5[i+12] = temp4[i+12] + W32[12] * temp4[i + 28];
        temp5[i+13] = temp4[i+13] + W32[13] * temp4[i + 29];
        temp5[i+14] = temp4[i+14] + W32[14] * temp4[i + 30];
        temp5[i+15] = temp4[i+15] + W32[15] * temp4[i + 31];

        temp5[i+16] = temp4[i+0] - W32[0] * temp4[i + 16];
        temp5[i+17] = temp4[i+1] - W32[1] * temp4[i + 17];
        temp5[i+18] = temp4[i+2] - W32[2] * temp4[i + 18];
        temp5[i+19] = temp4[i+3] - W32[3] * temp4[i + 19];
        temp5[i+20] = temp4[i+4] - W32[4] * temp4[i + 20];
        temp5[i+21] = temp4[i+5] - W32[5] * temp4[i + 21];
        temp5[i+22] = temp4[i+6] - W32[6] * temp4[i + 22];
        temp5[i+23] = temp4[i+7] - W32[7] * temp4[i + 23];
        temp5[i+24] = temp4[i+8] - W32[8] * temp4[i + 24];
        temp5[i+25] = temp4[i+9] - W32[9] * temp4[i + 25];
        temp5[i+26] = temp4[i+10] - W32[10] * temp4[i + 26];
        temp5[i+27] = temp4[i+11] - W32[11] * temp4[i + 27];
        temp5[i+28] = temp4[i+12] - W32[12] * temp4[i + 28];
        temp5[i+29] = temp4[i+13] - W32[13] * temp4[i + 29];
        temp5[i+30] = temp4[i+14] - W32[14] * temp4[i + 30];
        temp5[i+31] = temp4[i+15] - W32[15] * temp4[i + 31];
    }

    stage6 :
    for(int i = 0; i < N; i += 64){
        FFT_output[i+0] = temp5[i+0] + W64[0] * temp5[i + 32];
        FFT_output[i+1] = temp5[i+1] + W64[1] * temp5[i + 33];
        FFT_output[i+2] = temp5[i+2] + W64[2] * temp5[i + 34];
        FFT_output[i+3] = temp5[i+3] + W64[3] * temp5[i + 25];
        FFT_output[i+4] = temp5[i+4] + W64[4] * temp5[i + 36];
        FFT_output[i+5] = temp5[i+5] + W64[5] * temp5[i + 37];
        FFT_output[i+6] = temp5[i+6] + W64[6] * temp5[i + 38];
        FFT_output[i+7] = temp5[i+7] + W64[7] * temp5[i + 39];
        FFT_output[i+8] = temp5[i+8] + W64[8] * temp5[i + 40];
        FFT_output[i+9] = temp5[i+9] + W64[9] * temp5[i + 41];
        FFT_output[i+10] = temp5[i+10] + W64[10] * temp5[i + 42];
        FFT_output[i+11] = temp5[i+11] + W64[11] * temp5[i + 43];
        FFT_output[i+12] = temp5[i+12] + W64[12] * temp5[i + 44];
        FFT_output[i+13] = temp5[i+13] + W64[13] * temp5[i + 45];
        FFT_output[i+14] = temp5[i+14] + W64[14] * temp5[i + 46];
        FFT_output[i+15] = temp5[i+15] + W64[15] * temp5[i + 47];
        FFT_output[i+16] = temp5[i+16] + W64[16] * temp5[i + 48];
        FFT_output[i+17] = temp5[i+17] + W64[17] * temp5[i + 49];
        FFT_output[i+18] = temp5[i+18] + W64[18] * temp5[i + 50];
        FFT_output[i+19] = temp5[i+19] + W64[19] * temp5[i + 51];
        FFT_output[i+20] = temp5[i+20] + W64[20] * temp5[i + 52];
        FFT_output[i+21] = temp5[i+21] + W64[21] * temp5[i + 53];
        FFT_output[i+22] = temp5[i+22] + W64[22] * temp5[i + 54];
        FFT_output[i+23] = temp5[i+23] + W64[23] * temp5[i + 55];
        FFT_output[i+24] = temp5[i+24] + W64[24] * temp5[i + 56];
        FFT_output[i+25] = temp5[i+25] + W64[25] * temp5[i + 57];
        FFT_output[i+26] = temp5[i+26] + W64[26] * temp5[i + 58];
        FFT_output[i+27] = temp5[i+27] + W64[27] * temp5[i + 59];
        FFT_output[i+28] = temp5[i+28] + W64[28] * temp5[i + 60];
        FFT_output[i+29] = temp5[i+29] + W64[29] * temp5[i + 61];
        FFT_output[i+30] = temp5[i+30] + W64[30] * temp5[i + 62];
        FFT_output[i+31] = temp5[i+31] + W64[31] * temp5[i + 63];

        FFT_output[i+32] = temp5[i+0] - W64[0] * temp5[i + 32];
        FFT_output[i+33] = temp5[i+1] - W64[1] * temp5[i + 33];
        FFT_output[i+34] = temp5[i+2] - W64[2] * temp5[i + 34];
        FFT_output[i+35] = temp5[i+3] - W64[3] * temp5[i + 25];
        FFT_output[i+36] = temp5[i+4] - W64[4] * temp5[i + 36];
        FFT_output[i+37] = temp5[i+5] - W64[5] * temp5[i + 37];
        FFT_output[i+38] = temp5[i+6] - W64[6] * temp5[i + 38];
        FFT_output[i+39] = temp5[i+7] - W64[7] * temp5[i + 39];
        FFT_output[i+40] = temp5[i+8] - W64[8] * temp5[i + 40];
        FFT_output[i+41] = temp5[i+9] - W64[9] * temp5[i + 41];
        FFT_output[i+42] = temp5[i+10] - W64[10] * temp5[i + 42];
        FFT_output[i+43] = temp5[i+11] - W64[11] * temp5[i + 43];
        FFT_output[i+44] = temp5[i+12] - W64[12] * temp5[i + 44];
        FFT_output[i+45] = temp5[i+13] - W64[13] * temp5[i + 45];
        FFT_output[i+46] = temp5[i+14] - W64[14] * temp5[i + 46];
        FFT_output[i+47] = temp5[i+15] - W64[15] * temp5[i + 47];
        FFT_output[i+48] = temp5[i+16] - W64[16] * temp5[i + 48];
        FFT_output[i+49] = temp5[i+17] - W64[17] * temp5[i + 49];
        FFT_output[i+50] = temp5[i+18] - W64[18] * temp5[i + 50];
        FFT_output[i+51] = temp5[i+19] - W64[19] * temp5[i + 51];
        FFT_output[i+52] = temp5[i+20] - W64[20] * temp5[i + 52];
        FFT_output[i+53] = temp5[i+21] - W64[21] * temp5[i + 53];
        FFT_output[i+54] = temp5[i+22] - W64[22] * temp5[i + 54];
        FFT_output[i+55] = temp5[i+23] - W64[23] * temp5[i + 55];
        FFT_output[i+56] = temp5[i+24] - W64[24] * temp5[i + 56];
        FFT_output[i+57] = temp5[i+25] - W64[25] * temp5[i + 57];
        FFT_output[i+58] = temp5[i+26] - W64[26] * temp5[i + 58];
        FFT_output[i+59] = temp5[i+27] - W64[27] * temp5[i + 59];
        FFT_output[i+60] = temp5[i+28] - W64[28] * temp5[i + 60];
        FFT_output[i+61] = temp5[i+29] - W64[29] * temp5[i + 61];
        FFT_output[i+62] = temp5[i+30] - W64[30] * temp5[i + 62];
        FFT_output[i+63] = temp5[i+31] - W64[31] * temp5[i + 63];
    }
}


int main(){
init_platform();
// Initializing Timer instances for PS and PL
XTime PL_start_time, PL_end_time;
XTime PS_start_time, PS_end_time;

    const float complex FFT_input[N] = {
        40 , 77 , 62 , 85 ,
        50 , 28 , 81 , 19 ,
        36 , 66 , 70 , 42 ,
		54 , 26 , 58 , 61 ,
        40 , 77 , 62 , 85 ,
        50 , 28 , 81 , 19 ,
        36 , 66 , 70 , 42 ,
		54 , 26 , 58 , 61 ,
        40 , 77 , 62 , 85 ,
        50 , 28 , 81 , 19 ,
        36 , 66 , 70 , 42 ,
		54 , 26 , 58 , 61 ,
        40 , 77 , 62 , 85 ,
        50 , 28 , 81 , 19 ,
        36 , 66 , 70 , 42 ,
		54 , 26 , 58 , 61
    };
float complex FFT_output_sw[N], FFT_output_hw[N];
float complex FFT_rev_sw[N];
///// Software 64-point FFT
XTime_SetTime(0); // Setting Timer to value
XTime_GetTime(&PS_start_time); // Get Start Time
bitreverse (FFT_input, FFT_rev_sw);
FFT_stages (FFT_rev_sw, FFT_output_sw);
XTime_GetTime(&PS_end_time); // Get End Time



/////// Hardware 8-point FFT
int status;
XAxiDma AxiDMA;
status=DMA_Init(&AxiDMA, XPAR_AXI_DMA_0_DEVICE_ID);
if(status)
	return 1;// DMA Init Failed

XTime_SetTime(0); // Setting Timer to value
XTime_GetTime(&PL_start_time); // Get Start Time

// Simple DMA Transfers
status=XAxiDma_SimpleTransfer (&AxiDMA, (UINTPTR) FFT_output_hw, (sizeof(float complex) *N), XAXIDMA_DEVICE_TO_DMA);
status=XAxiDma_SimpleTransfer (&AxiDMA, (UINTPTR) FFT_input, (sizeof(float complex) *N), XAXIDMA_DMA_TO_DEVICE);
// POLLING-Check whether the DMA-to-Device and Device-to-DMA transfers are complete
while(XAxiDma_Busy (&AxiDMA, XAXIDMA_DMA_TO_DEVICE));
	//printf("\n\rDMA-to-Device Transfer Done!");
while(XAxiDma_Busy (&AxiDMA, XAXIDMA_DEVICE_TO_DMA));
	//printf("\n\rDevice-to-DMA Transfer Done!");

XTime_GetTime(&PL_end_time); // Get End Time


/////////// Verifying Hardware result with Software
for (int i=0;i<N;i++){
	printf("\n \rPS Output- %f+%fI, PL Output- %f+%fI", crealf (FFT_output_sw[i]), cimagf(FFT_output_sw[i]), crealf (FFT_output_hw[i]), cimagf (FFT_output_hw[i]));
	float diff1=abs (crealf (FFT_output_sw[i])-crealf (FFT_output_hw[i]));
	float diff2=abs (cimagf(FFT_output_sw[i])-cimagf(FFT_output_hw[i]));
//	 if (diff1>=0.01 && diff2>=0.01){
//	 	printf("\n\rData Mismatch found at index %d !",i);
//	 	break;
//	 }
//	 else
//	 	printf("DMA Transfer Successful!");
}
/////////// Software & Hardware Exceution Time calculation printf("\n \r Execution Time Comparison --------");
printf("\n\r------ Execution Time Comparison ------");
float time=0;
time= (float)1.0*(PS_end_time-PS_start_time)/(COUNTS_PER_SECOND/1000000); // Software Exceution Time calculation
printf("\n\r Execution Time for PS in Micro-Seconds : %f",time);

time=0;
time= (float)1.0*(PL_end_time-PL_start_time)/(COUNTS_PER_SECOND/1000000);  // Hardware Exceution Time calculation
printf("\n\r Execution Time for PL in Micro-Seconds : %f",time);
cleanup_platform();
return 0;
}
